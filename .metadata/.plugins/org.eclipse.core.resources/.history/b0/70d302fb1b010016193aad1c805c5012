package Robot;

import java.io.IOException;
import java.util.HashMap;

import Robot.Navigator;
import Robot.Odometer;
import lejos.hardware.Button;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.EV3MediumRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.EV3TouchSensor;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.SampleProvider;
import wifi.WifiConnection;

public class Main 
{
	
	//creating instances of motors for use
	/**
	 * Left motor object. Every other class that wants to use the robot's left motor refers to this public variable.
	 */
	public static final EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("A"));
	/**
	 * Right motor object. Every other class that wants to use the robot's right motor refers to this public variable.
	 */
	public static final EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("D"));
	/**
	 * Head motor object. Every other class that wants to use the robot's head motor (used to rotate the ultrasonic
	 * sensor) refers to this public variable.
	 */
	public static final EV3MediumRegulatedMotor headMotor = new EV3MediumRegulatedMotor(LocalEV3.get().getPort("C"));
	
	/**
	 * Port that the ultrasonic sensor uses.
	 */
	public static final Port usPort = LocalEV3.get().getPort("S3");
	/**
	 * Port that the left color sensor uses.
	 */
	public static final Port leftColorPort = LocalEV3.get().getPort("S4");
	/**
	 * Port that the right color sensor uses.
	 */
	public static final Port rightColorPort = LocalEV3.get().getPort("S2");
	
	
	//specifications about robot, global and should be accessible.
	/**
	 * Radius of the robot's wheels in (cm)
	 */
	public static double WHEEL_RADIUS = 2.03; //measure
	/**
	 * Width of the robot's track in (cm)
	 */
	public static double TRACK = 18.0;
	/**
	 * Distance between the light sensors and the track in (cm)
	 */
	public static double LS_DIST = 4.5;
	/**
	 * Maximum distance (cm) that the ultrasonic sensor reads to declares that we see an obstacle/wall
	 */
	public static int wallDist = 20;
	/**
	 * Ideal distance (cm) to keep the robot away from the wall within a threshold set in bandWidth when wallfollowing
	 */
	public static int bandCenter = 20;
	/**
	 * Allowable deviation from the bandCenter to declare that we are not too close or too far from the wall when wall following
	 */
	public static int bandWidth = 2;
	/**
	 * Low motor speed used in wall following
	 */
	public static int motorLow = 100;
	/**
	 * High motor speed used in wall following
	 */
	public static int motorHigh = 180;
	
	// parameters received from WiFi
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the starting corner.
	 * 1 is the lower left corner, 2 the lower right, 3 the upper right, 4 the upper left.
	 */
	public static int startingCorner = 1;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the role of the robot.
	 * 0 is the attaacker, 1 is the defender.
	 */
	public static int role; // attacker is 0, defender is 1
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the width of the goal in (cm).
	 */
	public static int goalWidth;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the y coordinate of the defender line in (cm).
	 */
	public static int defenderLine;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the y coordinate of the forward line in (cm).
	 */
	public static int forwardLine;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the x coordinate of the lower left corner where the ball area is in (cm).
	 */
	public static int lowerLeftX;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the y coordinate of the lower left corner where the ball area is in (cm).
	 */
	public static int lowerLeftY;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the x coordinate of the upper right corner where the ball area is in (cm).
	 */
	public static int upperRightX;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the y coordinate of the upper right corner where the ball area is in (cm).
	 */
	public static int upperRightY;
	/**
	 * Part of the parameters we receive via Wifi. This is the variable indicating the ball colour that we have to grab.
	 * 0 is red, 1 is blue, 2 is any colour
	 */
	public static int ballColour;
	
	//classes main will rely on
	/**
	 * Odometer object that keeps track of where the robot is relative to the board. All other classes refer to this odometer.
	 */
	public static Odometer odometer;
	/**
	 * Navigator object that handles the movement of the robot. All other classes refer to this navigator.
	 */
	public static Navigator nav;
	
	/**
	 * Ultrasonic sensor object
	 */
	public static SensorModes usSensor = new EV3UltrasonicSensor(usPort);
	/**
	 * Sample provider for the ultrasonic sensor object usSensor
	 */
	public static SampleProvider usValue = usSensor.getMode("Distance");
	/**
	 * Array that stores the data read from the ultrasonic sensor
	 */
	public static float[] usData = new float[usValue.sampleSize()];
	
	/**
	 * The left color sensor object
	 */
	public static SensorModes leftColorSensor = new EV3ColorSensor(leftColorPort);
	/**
	 * Sample provider for the left color sensor
	 */
	public static SampleProvider leftColorValue = leftColorSensor.getMode("Red");
	/**
	 * Array that stores the data read from the left color sensor
	 */
	public static float[] leftColorData = new float[leftColorValue.sampleSize()];		
	
	/**
	 * The right color sensor object
	 */
	public static SensorModes rightColorSensor = new EV3ColorSensor(rightColorPort);
	/**
	 * Sample provider for the right color sensor
	 */
	public static SampleProvider rightColorValue = rightColorSensor.getMode("Red");
	/**
	 * Array that stores the data read from the right color sensor
	 */
	public static float[] rightColorData = new float[rightColorValue.sampleSize()];
	
	// WIFI Class 
	/**
	 * Server IP, this server gives us various parameters via wifi.
	 */
	private static final String SERVER_IP = "192.168.0.101";//"localhost"; //1. SERVER_IP: the IP address of the computer running the server application
	/**
	 * Our project team number
	 */
	private static final int TEAM_NUMBER = 6;	// 2. TEAM_NUMBER: your project team number

	
	private static final Port touchsensorport = LocalEV3.get().getPort("S1");
	
	private static final SensorModes sensor = new EV3TouchSensor(touchsensorport);
	
	public static void main(String[] args) 
	{
		odometer = new Odometer();
		odometer.start();
		
		nav = new Navigator();
		nav.start();
		
		parseParameters();
		readyPosition();
		
		Player player = new Player();
		player.startPlaying();
		
		/*BallGrab b = new BallGrab();
		
		SampleProvider touch= sensor.getMode("Touch");
		float[] sample = new float[touch.sampleSize()];
		b.grabBall();
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		b.throwBall();
		
		while(true)
		{
			touch.fetchSample(sample, 0);
			if (sample[0]==1)
			{
				b.throwBall();
			}
		}*/
		
		b.slave.disConnect();
	}
	
	/**
	 * Method that starts the WifiConnection class, establishes a connection with the server, and parses the parameters.
	 */
	private static void parseParameters() //start wificonnection class, establish connection and set variables
	{
		WifiConnection conn = null;
		
		try {
			conn = new WifiConnection(SERVER_IP, TEAM_NUMBER);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		if (conn != null){
			
			HashMap<String,Integer> t = conn.StartData;
			if (t == null)
				System.out.println("Failed to read transmission");
			else {
				System.out.println("Transmission read");
				
				// initialize variables
				
				if(t.get("OTN").equals(TEAM_NUMBER)) 
				{//attacker
					role = 0;
					startingCorner = t.get("OSC");
				}
				else
				{//defender
					role = 1;
					startingCorner = t.get("DSC");
				}
				goalWidth = t.get("w1")*30;
				defenderLine = (11-t.get("d1"))*30;
				forwardLine = t.get("d2")*30;
				lowerLeftX = t.get("ll-x")*30;
				lowerLeftY = t.get("ll-y")*30;
				upperRightX = t.get("ur-x")*30;
				upperRightY = t.get("ur-y")*30;
				ballColour = t.get("BC");	
			}
		} else {
			System.out.println("Transmission failed");
		}		
	}
	/**
	 * Method that localizes using ultrasonic and linesquarer techniques. By the end of the method, the robot will be at
	 * (0,0) if starting at corner 1, (300,0) if corner 2, (300,300) if corner 3, (0,300) if corner 4.
	 * It will also be facing 0 degrees if corner 1, 90 if corner 2, 180 if corner 3, 270 if corner 4.
	 * In addition, the odometer will set its x,y, and theta accordingly depending on its starting corner.
	 */
	private static void readyPosition() //start localization
	{
		USLocalizer usL = new USLocalizer();
		usL.doLocalization();
		LineSquarer lineSquarer = new LineSquarer();
		lineSquarer.squareWithLines();
		//once you get here, the robot will be at what it thinks is 0,0 and heading in 0. If the starting corner was 1, this would be fine.
		
		switch(startingCorner)
		{
		case 1: 
			odometer.setX(0);
			odometer.setY(0);
			odometer.setTheta(0);
			System.out.println("Case 1");
			break;
		case 2:
			odometer.setX(300);
			odometer.setY(0);
			odometer.setTheta(0.5*Math.PI);
			System.out.println("Case 2");
			break;
		case 3:
			odometer.setX(300);
			odometer.setY(300);
			odometer.setTheta(Math.PI);
			System.out.println("Case 3");
			break;
		case 4:
			odometer.setX(0);
			odometer.setY(300);
			odometer.setTheta(1.5*Math.PI);
			System.out.println("Case 4");
			break;
		}
	}

}
